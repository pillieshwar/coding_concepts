from typing import List
#LeetCode

def knapsack(costs: List[List[int]]) -> int:
    dp = [[0 for x in range(3)] for x in range(len(costs)+1)]
    n = len(costs)
    for i in range(len(costs)+1):
        for j in range(3):
            # print("i : ",i, "j :", j, "  wt[i-1]",wt[i-1])
            # print(i[j])
            if(i==0):
                dp[i][j]=0
            elif(j==0):
                dp[i][j] = min(dp[i-1][j+1]+costs[i-1][j],dp[i-1][j+2]+costs[i-1][j])
            elif(j==1):
                dp[i][j] = min(dp[i-1][j-1]+costs[i-1][j],dp[i-1][j+1]+costs[i-1][j])
            elif(j==2):
                dp[i][j] = min(dp[i-1][j-2]+costs[i-1][j],dp[i-1][j-1]+costs[i-1][j])
    print(min(dp[n][0],dp[n][1],dp[n][2]))

costs = [[17,2,17],[16,16,5],[14,3,19]]
n = len(costs[0])